(()=>{"use strict";var t={365:(t,n,e)=>{e.d(n,{A:()=>s});var i=e(354),a=e.n(i),o=e(314),r=e.n(o)()(a());r.push([t.id,"\n/* COLOR PALETTE */\n:root {\n    --green: #42B385;\n    --light-green: #7DD6B1;\n    --grey: #595959;\n    --light-grey: #F9F9F9;\n    --white: #FFFFFF;\n    --dark-grey: #757575;\n    --red: #C95555;\n    --dark-red: #C46161;\n    --dark-aqua: #0E9AA1;\n    --aqua: #00B3BB;\n    --light-aqua: #00E6AA;\n    --green: #61B874;\n    --yellow: #E6DB7B;\n}\n\n/* GENERAL STYLES */\n* {\n    box-sizing: border-box;\n}\n\n\n\n#body {\n    font-family: 'Roboto', sans-serif;\n    color: var(--grey);\n    margin: 0px;\n    padding: 0px;\n    font-weight: 400;\n}\n\nh2 {\n    font-weight: 500;\n}\n\np {\n    margin: 0;\n}\n\nbutton {\n    padding: 10px 17px;\n    cursor: pointer;\n}\n\ninput:focus, button:focus, textarea:focus, select:focus {\n    outline: none;\n}\n\n/* Alignment */\n.padding-right {\n    padding-right: 7px;\n}\n\n.hover-icon:hover {\n    cursor: pointer;\n}\n\n/* Visual Styles */\n\n.hide {\n    display: none;\n}\n\n.flex {\n    display: flex;\n}\n\n.add-z-index {\n    z-index: 1;\n}\n\n.hover-icon:hover {\n    cursor: pointer;\n}\n\n.scale-element:hover {\n    transform: scale(1.1);\n}\n\n.low-priority {\n    color: var(--green);\n}\n\n.mid-priority {\n    color: var(--yellow);\n}\n\n.high-priority {\n    color: var(--red);\n}\n\n.task-done-text {\n    text-decoration-line: line-through;\n}\n\n/* HEADER */\n#header {\n    display: flex;\n    align-items: center;\n    height: 60px;\n    background: linear-gradient(90deg, rgba(51, 170, 121,1) 0%, rgba(118, 210, 172, 1) 50%, rgba(184,250,222,1) 100%);\n    font-family: 'Lato', sans-serif;    \n}\n\n.logo {\n    padding: 20px 40px;\n    font-size: 25px;\n    color: var(--white);\n}\n\n/* MENU TOGGLE */\n.toggle-menu {\n    display: none;\n    height: 30px;\n    width: 30px;\n    margin-left: 22px;\n    padding: 9px 5px 4px 5px;\n    color: var(--white);\n    background-color: var(--light-green);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\n.show-sidebar {\n    -webkit-transform: translateX(0);\n    transform: translateX(0);\n}\n\n.hide-sidebar {\n    -webkit-transform: translateX(-300px);\n    transform: translateX(-300px);\n}\n\n.expand-main {\n    margin-left: 0px;\n}\n\n.contract-main {\n    margin-left: 300px;\n}\n\n.inactive-main {\n    opacity: 0.2;\n}\n\n.burger-line {\n    height: 2px;\n    margin-bottom: 3px;\n    background: var(--white);\n    transition: all .4s ease;\n}\n\n.toggle-menu.active .burger-line:last-child {\n    opacity: 0;\n}\n.toggle-menu.active .burger-line:first-child {\ntransform: rotate(45deg) translate(4px, 4px);\n}\n.toggle-menu.active .burger-line:nth-child(2) {\ntransform: rotate(-45deg);\n}\n\n/* NAVIGATION BAR */\n#sidebar-menu {\n    position: fixed;\n    overflow: auto;\n    width: 300px;\n    height: 100%;\n    padding-top: 40px 20px;\n    background-color: var(--light-grey);\n    transition: transform 250ms;\n    vertical-align: middle;\n}\n\n#sidebar-menu p {\n    display: inline-block;\n    vertical-align: middle;\n}\n\n.link, .project-link {\n    display: flex;\n    margin: 20px;\n    margin-bottom: 15px;\n    padding: 12px 20px;\n    background-color: var(--white);\n    font-size: 17px;\n    color: var(--dark-grey);\n    text-decoration: none;\n    border: 1px solid var(--light-grey);\n    border-radius: 5px;\n    transition: .3s;\n}\n\n.link p, .project-link p {\n    padding-left: 3px;\n}\n\n.project-text,\n.task-text {\n  white-space: nowrap;\n  max-width: 140px;\n  overflow: hidden;\n}\n\n.selected-link {\n    background-color: var(--light-green);\n    color: var(--white);\n}\n\n.selected-link:hover {\n    background-color: var(--green);\n}\n\n.link:not(.selected-link):hover, .project-link:not(.selected-link):hover {\n    border: 1px solid var(--light-green);\n    transition: .3s;\n}\n\n/* TASKS */\n.tasks-div {\n    max-width: 1000px;\n    margin: 0 auto;\n    padding: 40px;\n}\n\n.tasks-title-div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    font-size: 20px;\n    border-bottom: 1px solid var(--dark-grey);\n}\n\n.tasks-title {\n    display: flex;\n}\n\n.task-div {\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    border-bottom: 1px solid var(--light-grey);\n    transition: .3s;\n}\n\n.task-div:hover {\n    box-shadow: inset 0 -60px 0 0 var(--light-grey);\n    transition: .3s;\n}\n\n.task-text {\n    max-width: 650px;\n}\n\n.due-date {\n    align-self: center;\n    margin-right: 7px;\n    font-size: 13px;\n    color: var(--dark-aqua);\n}\n\n.default-tasks-icons i {\n    font-size: 17px;\n}\n\n/* TASK INFO */\n.task-title-div,\n.task-description-div,\n.task-due-date-div,\n.task-priority-div,\n.task-project-div {\n  display: flex;\n  padding: 20px 0;\n  border-bottom: 1px solid var(--grey);\n}\n.task-title-div {\n  padding-top: 0;\n}\n.task-project-div {\n  border-bottom: none;\n}\n.info-title,\n.info-description,\n.info-due-date,\n.info-priority,\n.info-project {\n  width: 110px;\n  font-weight: 700;\n}\n.info-task-title,\n.info-task-description,\n.info-task-priority {\n  width: 250px;\n}\n.info-task-description {\n  height: 60px;\n  line-height: 20px;\n  overflow-y: scroll;\n}\n\n\n/* PROJECTS */\n.nav-projects-title {\n    display: flex;\n    justify-content: space-between;\n    margin: 80px 20px 20px 20px;\n    padding: 0 20px 10px 20px;\n    width: 260px;\n    font-size: 18px;\n    border-bottom: 1px solid var(--dark-grey);\n}\n\n.project-link {\n    justify-content: space-between;\n}\n\n.nav-link-text {\n    white-space: nowrap;\n    max-width: 140px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n\n/* MAIN CONTENT */\n#main {\n    height: calc(100vh - 60px);\n    transition: all 250ms;\n}\n\n#main-title {\n    margin: 0;\n    padding: 40px;\n    text-align: center;\n}\n\n.main-title-div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.main-title-icon {\n    font-size: 35px;\n}\n\n.main-title-text {\n    font-weight: 400;\n}\n\n/* FOOTER */\n#footer {\n    margin: 20px 0 40px 0;\n    text-align: center;\n    border-top: 1px solid var(--dark-grey);\n}\n\n.crafted-by {\n    margin: 10px;\n    font-size: 15px;\n}\n\n.footer-link {\n    text-decoration: none;\n    color: var(--light-green);\n    transition: 0.3s;\n}\n\n.footer-link:hover {\n    color: var (--green);\n    transition: 0.3s;\n}\n\n/* TOOLTIP */\n.tooltip-icon {\n    position: relative;\n}\n\n.tooltip-icon .tooltip-text {\n    visibility: hidden;\n    position: absolute;\n    bottom: 130%;\n    width: 135px;\n    margin-left: -125px;\n    padding: 10px;\n    background-color: var(--dark-grey);\n    font-family: 'Roboto', sans-serif;\n    font-size: 15px;\n    color: var(--white);\n    text-align: center;\n    border-radius: 5px;\n    opacity: 0;\n    transition: opacity 0.3s, visibility 0.3s;\n}\n\n.tooltip-icon .tooltip-text::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 85%;\n    border-width: 5px;\n    border-style: solid;\n    border-color: var(--dark-grey) transparent transparent transparent;\n}\n\n.tooltip-icon:hover .tooltip-text {\n    visibility: visible;\n    opacity: 1;\n}\n\n/* MODAL STYLES */\n#modal {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.8);\n    transition: .2s;\n    margin: 0 auto;\n    z-index: 2;\n}\n\n.modal-card {\n    position: relative;\n    margin: 15% auto;\n    max-width: 400px;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    box-shadow: rgba(46, 46, 46, 0.2) 0px 2px 8px 0px;\n    animation: fadeIn .2s;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    background: linear-gradient(90deg, var(--aqua) 0%, var(--light-aqua) 100%);\n    color: var(--white);\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n.modal-header h2 {\n    margin: 0;\n    padding: 20px;\n}\n.fa-times {\n    height: 20px;\n}\n.close-modal {\n    margin: 10px 20px;\n    color: var(--white);\n    font-size: 20px;\n    font-weight: 700;\n    cursor: pointer;\n}\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    padding: 25px 20px;\n    background-color: var(--white);\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n}\n\n#form input, .task-description, .task-priority {\n    width: 100%;\n    margin: 5px 0 20px 0;\n    padding: 10px;\n    color: var(--dark-grey);\n    border: 1px solid var(--grey);\n    border-radius: 3px;\n    background-color: var(--white);\n    transition: .3s;\n}\n\n#form input:focus, .task-description:focus, .task-priority:focus {\n    border-color: var(--aqua);\n    transition: .3s;\n}\n\n.title-star {\n    color: var(--red);\n}\n\n.modal-title-error {\n    margin: -15px 0 20px 0;\n    font-size: 13px;\n    color: var(--red);\n}\n\n.modal-options {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-top: 40;\n    padding-top: 20px;\n    border-top: 1px solid var(--grey);\n}\n\n.cancel-modal {\n    background-color: var(--white);\n    color: var(--dark-grey);\n    border: 1px solid var(--grey);\n    border-radius: 3px;\n    transition: .3s;\n}\n.cancel-modal:hover {\n    color: var(--dark-aqua);\n    border-color: var(--dark-aqua);\n}\n.confirm-modal {\n    margin-left: 10px;\n    background-color: var(--light-aqua);\n    color: var(--white);\n    border: 1px solid transparent;\n    border-radius: 3px;\n    transition: .3s;\n}\n.confirm-modal:hover {\n    background-color: var(--dark-aqua);\n}\n\n/* MODAL TO ADD A TASK */\n.task-description {\n    width: 100%;\n}\n\n/* MODAL TO DELETE PROJECT */\n.deletion-modal-header {\n    background: linear-gradient(90deg, var(--dark-red) 0%, var(--red) 100%);\n  }\n  .modal-title {\n    font-weight: 900;\n  }\n  .cancel-deletion:hover {\n    color: var(--dark-grey);\n    border: 1px solid var(--dark-grey);\n  }\n  .confirm-deletion {\n    background-color: var(--red);\n  }\n  .confirm-deletion:hover {\n    background-color: var(--dark-red);\n  }\n\n/* PROJECTS MODAL RADIO BUTTONS - ICONS */\n.project-icons {\n    display: -ms-grid;\n    display: grid;\n    grid-template-columns: repeat(8, -webkit-min-content);\n    -ms-grid-columns: -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content;\n    -ms-grid-columns: min-content 10px min-content 10px min-content 10px min-content 10px min-content 10px min-content 10px min-content;\n    grid-template-columns: repeat(8, min-content);\n    grid-gap: 4px;\n    margin: 5px 0;\n}\n.project-icons input {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n.project-icons i {\n    width: 40px;\n}\n.radio-control {\n    display: inline-block;\n    width: 41px;\n    padding: 5px 0;\n    border: 1px solid var(--grey);\n    border-radius: 5px;\n    font-size: 25px;\n    cursor: pointer;\n    transition: .1s;\n}\n.radio-control:hover {\n    border-color: var(--dark-aqua);\n    color: var(--dark-aqua);\n    transition: .1s;\n}\n.project-icons input:focus + .radio-control,\n.radio-before input:checked + .radio-control {\n    color: var(--dark-aqua);\n    border: 1px solid var(--dark-aqua);\n}\n\n.project-deletion-title,\n.task-deletion-title {\n  font-weight: 700;\n}\n\n.task-deletion-text, \n.project-deletion-text {\n    margin-bottom: 20px;\n}\n  \n\n/* RESPONSIVE */\n\n@media (max-width: 1500px) {\n\n    .task-text {\n        max-width: 500px;\n    }\n}\n\n@media (max-width: 1200px) {\n\n    .task-text {\n        max-width: 400px;\n    }\n\n}\n\n@media (max-width: 1000px) {\n\n    .toggle-menu {\n      display: block;\n    }\n\n    .task-text {\n        max-width: 500px;\n    }\n  \n}\n\n@media (max-width: 800px) {\n\n    .task-text {\n        max-width: 200px;\n    }\n}\n\n@media (max-width: 500px) {\n\n    .task-text {\n        max-width: 100px;\n    }\n\n}\n\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:["\n/* COLOR PALETTE */\n:root {\n    --green: #42B385;\n    --light-green: #7DD6B1;\n    --grey: #595959;\n    --light-grey: #F9F9F9;\n    --white: #FFFFFF;\n    --dark-grey: #757575;\n    --red: #C95555;\n    --dark-red: #C46161;\n    --dark-aqua: #0E9AA1;\n    --aqua: #00B3BB;\n    --light-aqua: #00E6AA;\n    --green: #61B874;\n    --yellow: #E6DB7B;\n}\n\n/* GENERAL STYLES */\n* {\n    box-sizing: border-box;\n}\n\n\n\n#body {\n    font-family: 'Roboto', sans-serif;\n    color: var(--grey);\n    margin: 0px;\n    padding: 0px;\n    font-weight: 400;\n}\n\nh2 {\n    font-weight: 500;\n}\n\np {\n    margin: 0;\n}\n\nbutton {\n    padding: 10px 17px;\n    cursor: pointer;\n}\n\ninput:focus, button:focus, textarea:focus, select:focus {\n    outline: none;\n}\n\n/* Alignment */\n.padding-right {\n    padding-right: 7px;\n}\n\n.hover-icon:hover {\n    cursor: pointer;\n}\n\n/* Visual Styles */\n\n.hide {\n    display: none;\n}\n\n.flex {\n    display: flex;\n}\n\n.add-z-index {\n    z-index: 1;\n}\n\n.hover-icon:hover {\n    cursor: pointer;\n}\n\n.scale-element:hover {\n    transform: scale(1.1);\n}\n\n.low-priority {\n    color: var(--green);\n}\n\n.mid-priority {\n    color: var(--yellow);\n}\n\n.high-priority {\n    color: var(--red);\n}\n\n.task-done-text {\n    text-decoration-line: line-through;\n}\n\n/* HEADER */\n#header {\n    display: flex;\n    align-items: center;\n    height: 60px;\n    background: linear-gradient(90deg, rgba(51, 170, 121,1) 0%, rgba(118, 210, 172, 1) 50%, rgba(184,250,222,1) 100%);\n    font-family: 'Lato', sans-serif;    \n}\n\n.logo {\n    padding: 20px 40px;\n    font-size: 25px;\n    color: var(--white);\n}\n\n/* MENU TOGGLE */\n.toggle-menu {\n    display: none;\n    height: 30px;\n    width: 30px;\n    margin-left: 22px;\n    padding: 9px 5px 4px 5px;\n    color: var(--white);\n    background-color: var(--light-green);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\n.show-sidebar {\n    -webkit-transform: translateX(0);\n    transform: translateX(0);\n}\n\n.hide-sidebar {\n    -webkit-transform: translateX(-300px);\n    transform: translateX(-300px);\n}\n\n.expand-main {\n    margin-left: 0px;\n}\n\n.contract-main {\n    margin-left: 300px;\n}\n\n.inactive-main {\n    opacity: 0.2;\n}\n\n.burger-line {\n    height: 2px;\n    margin-bottom: 3px;\n    background: var(--white);\n    transition: all .4s ease;\n}\n\n.toggle-menu.active .burger-line:last-child {\n    opacity: 0;\n}\n.toggle-menu.active .burger-line:first-child {\ntransform: rotate(45deg) translate(4px, 4px);\n}\n.toggle-menu.active .burger-line:nth-child(2) {\ntransform: rotate(-45deg);\n}\n\n/* NAVIGATION BAR */\n#sidebar-menu {\n    position: fixed;\n    overflow: auto;\n    width: 300px;\n    height: 100%;\n    padding-top: 40px 20px;\n    background-color: var(--light-grey);\n    transition: transform 250ms;\n    vertical-align: middle;\n}\n\n#sidebar-menu p {\n    display: inline-block;\n    vertical-align: middle;\n}\n\n.link, .project-link {\n    display: flex;\n    margin: 20px;\n    margin-bottom: 15px;\n    padding: 12px 20px;\n    background-color: var(--white);\n    font-size: 17px;\n    color: var(--dark-grey);\n    text-decoration: none;\n    border: 1px solid var(--light-grey);\n    border-radius: 5px;\n    transition: .3s;\n}\n\n.link p, .project-link p {\n    padding-left: 3px;\n}\n\n.project-text,\n.task-text {\n  white-space: nowrap;\n  max-width: 140px;\n  overflow: hidden;\n}\n\n.selected-link {\n    background-color: var(--light-green);\n    color: var(--white);\n}\n\n.selected-link:hover {\n    background-color: var(--green);\n}\n\n.link:not(.selected-link):hover, .project-link:not(.selected-link):hover {\n    border: 1px solid var(--light-green);\n    transition: .3s;\n}\n\n/* TASKS */\n.tasks-div {\n    max-width: 1000px;\n    margin: 0 auto;\n    padding: 40px;\n}\n\n.tasks-title-div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    font-size: 20px;\n    border-bottom: 1px solid var(--dark-grey);\n}\n\n.tasks-title {\n    display: flex;\n}\n\n.task-div {\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    border-bottom: 1px solid var(--light-grey);\n    transition: .3s;\n}\n\n.task-div:hover {\n    box-shadow: inset 0 -60px 0 0 var(--light-grey);\n    transition: .3s;\n}\n\n.task-text {\n    max-width: 650px;\n}\n\n.due-date {\n    align-self: center;\n    margin-right: 7px;\n    font-size: 13px;\n    color: var(--dark-aqua);\n}\n\n.default-tasks-icons i {\n    font-size: 17px;\n}\n\n/* TASK INFO */\n.task-title-div,\n.task-description-div,\n.task-due-date-div,\n.task-priority-div,\n.task-project-div {\n  display: flex;\n  padding: 20px 0;\n  border-bottom: 1px solid var(--grey);\n}\n.task-title-div {\n  padding-top: 0;\n}\n.task-project-div {\n  border-bottom: none;\n}\n.info-title,\n.info-description,\n.info-due-date,\n.info-priority,\n.info-project {\n  width: 110px;\n  font-weight: 700;\n}\n.info-task-title,\n.info-task-description,\n.info-task-priority {\n  width: 250px;\n}\n.info-task-description {\n  height: 60px;\n  line-height: 20px;\n  overflow-y: scroll;\n}\n\n\n/* PROJECTS */\n.nav-projects-title {\n    display: flex;\n    justify-content: space-between;\n    margin: 80px 20px 20px 20px;\n    padding: 0 20px 10px 20px;\n    width: 260px;\n    font-size: 18px;\n    border-bottom: 1px solid var(--dark-grey);\n}\n\n.project-link {\n    justify-content: space-between;\n}\n\n.nav-link-text {\n    white-space: nowrap;\n    max-width: 140px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n\n/* MAIN CONTENT */\n#main {\n    height: calc(100vh - 60px);\n    transition: all 250ms;\n}\n\n#main-title {\n    margin: 0;\n    padding: 40px;\n    text-align: center;\n}\n\n.main-title-div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.main-title-icon {\n    font-size: 35px;\n}\n\n.main-title-text {\n    font-weight: 400;\n}\n\n/* FOOTER */\n#footer {\n    margin: 20px 0 40px 0;\n    text-align: center;\n    border-top: 1px solid var(--dark-grey);\n}\n\n.crafted-by {\n    margin: 10px;\n    font-size: 15px;\n}\n\n.footer-link {\n    text-decoration: none;\n    color: var(--light-green);\n    transition: 0.3s;\n}\n\n.footer-link:hover {\n    color: var (--green);\n    transition: 0.3s;\n}\n\n/* TOOLTIP */\n.tooltip-icon {\n    position: relative;\n}\n\n.tooltip-icon .tooltip-text {\n    visibility: hidden;\n    position: absolute;\n    bottom: 130%;\n    width: 135px;\n    margin-left: -125px;\n    padding: 10px;\n    background-color: var(--dark-grey);\n    font-family: 'Roboto', sans-serif;\n    font-size: 15px;\n    color: var(--white);\n    text-align: center;\n    border-radius: 5px;\n    opacity: 0;\n    transition: opacity 0.3s, visibility 0.3s;\n}\n\n.tooltip-icon .tooltip-text::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 85%;\n    border-width: 5px;\n    border-style: solid;\n    border-color: var(--dark-grey) transparent transparent transparent;\n}\n\n.tooltip-icon:hover .tooltip-text {\n    visibility: visible;\n    opacity: 1;\n}\n\n/* MODAL STYLES */\n#modal {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.8);\n    transition: .2s;\n    margin: 0 auto;\n    z-index: 2;\n}\n\n.modal-card {\n    position: relative;\n    margin: 15% auto;\n    max-width: 400px;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    box-shadow: rgba(46, 46, 46, 0.2) 0px 2px 8px 0px;\n    animation: fadeIn .2s;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    background: linear-gradient(90deg, var(--aqua) 0%, var(--light-aqua) 100%);\n    color: var(--white);\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n.modal-header h2 {\n    margin: 0;\n    padding: 20px;\n}\n.fa-times {\n    height: 20px;\n}\n.close-modal {\n    margin: 10px 20px;\n    color: var(--white);\n    font-size: 20px;\n    font-weight: 700;\n    cursor: pointer;\n}\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    padding: 25px 20px;\n    background-color: var(--white);\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n}\n\n#form input, .task-description, .task-priority {\n    width: 100%;\n    margin: 5px 0 20px 0;\n    padding: 10px;\n    color: var(--dark-grey);\n    border: 1px solid var(--grey);\n    border-radius: 3px;\n    background-color: var(--white);\n    transition: .3s;\n}\n\n#form input:focus, .task-description:focus, .task-priority:focus {\n    border-color: var(--aqua);\n    transition: .3s;\n}\n\n.title-star {\n    color: var(--red);\n}\n\n.modal-title-error {\n    margin: -15px 0 20px 0;\n    font-size: 13px;\n    color: var(--red);\n}\n\n.modal-options {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-top: 40;\n    padding-top: 20px;\n    border-top: 1px solid var(--grey);\n}\n\n.cancel-modal {\n    background-color: var(--white);\n    color: var(--dark-grey);\n    border: 1px solid var(--grey);\n    border-radius: 3px;\n    transition: .3s;\n}\n.cancel-modal:hover {\n    color: var(--dark-aqua);\n    border-color: var(--dark-aqua);\n}\n.confirm-modal {\n    margin-left: 10px;\n    background-color: var(--light-aqua);\n    color: var(--white);\n    border: 1px solid transparent;\n    border-radius: 3px;\n    transition: .3s;\n}\n.confirm-modal:hover {\n    background-color: var(--dark-aqua);\n}\n\n/* MODAL TO ADD A TASK */\n.task-description {\n    width: 100%;\n}\n\n/* MODAL TO DELETE PROJECT */\n.deletion-modal-header {\n    background: linear-gradient(90deg, var(--dark-red) 0%, var(--red) 100%);\n  }\n  .modal-title {\n    font-weight: 900;\n  }\n  .cancel-deletion:hover {\n    color: var(--dark-grey);\n    border: 1px solid var(--dark-grey);\n  }\n  .confirm-deletion {\n    background-color: var(--red);\n  }\n  .confirm-deletion:hover {\n    background-color: var(--dark-red);\n  }\n\n/* PROJECTS MODAL RADIO BUTTONS - ICONS */\n.project-icons {\n    display: -ms-grid;\n    display: grid;\n    grid-template-columns: repeat(8, -webkit-min-content);\n    -ms-grid-columns: -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content 10px -webkit-min-content;\n    -ms-grid-columns: min-content 10px min-content 10px min-content 10px min-content 10px min-content 10px min-content 10px min-content;\n    grid-template-columns: repeat(8, min-content);\n    grid-gap: 4px;\n    margin: 5px 0;\n}\n.project-icons input {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n.project-icons i {\n    width: 40px;\n}\n.radio-control {\n    display: inline-block;\n    width: 41px;\n    padding: 5px 0;\n    border: 1px solid var(--grey);\n    border-radius: 5px;\n    font-size: 25px;\n    cursor: pointer;\n    transition: .1s;\n}\n.radio-control:hover {\n    border-color: var(--dark-aqua);\n    color: var(--dark-aqua);\n    transition: .1s;\n}\n.project-icons input:focus + .radio-control,\n.radio-before input:checked + .radio-control {\n    color: var(--dark-aqua);\n    border: 1px solid var(--dark-aqua);\n}\n\n.project-deletion-title,\n.task-deletion-title {\n  font-weight: 700;\n}\n\n.task-deletion-text, \n.project-deletion-text {\n    margin-bottom: 20px;\n}\n  \n\n/* RESPONSIVE */\n\n@media (max-width: 1500px) {\n\n    .task-text {\n        max-width: 500px;\n    }\n}\n\n@media (max-width: 1200px) {\n\n    .task-text {\n        max-width: 400px;\n    }\n\n}\n\n@media (max-width: 1000px) {\n\n    .toggle-menu {\n      display: block;\n    }\n\n    .task-text {\n        max-width: 500px;\n    }\n  \n}\n\n@media (max-width: 800px) {\n\n    .task-text {\n        max-width: 200px;\n    }\n}\n\n@media (max-width: 500px) {\n\n    .task-text {\n        max-width: 100px;\n    }\n\n}\n\n"],sourceRoot:""}]);const s=r},314:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",i=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),i&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),i&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,i,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(i)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(r[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);i&&r[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},354:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:t=>{var n=[];function e(t){for(var e=-1,i=0;i<n.length;i++)if(n[i].identifier===t){e=i;break}return e}function i(t,i){for(var o={},r=[],s=0;s<t.length;s++){var d=t[s],c=i.base?d[0]+i.base:d[0],l=o[c]||0,A="".concat(c," ").concat(l);o[c]=l+1;var u=e(A),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=a(p,i);i.byIndex=s,n.splice(s,0,{identifier:A,updater:m,references:1})}r.push(A)}return r}function a(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,a){var o=i(t=t||[],a=a||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var s=e(o[r]);n[s].references--}for(var d=i(t,a),c=0;c<o.length;c++){var l=e(o[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=d}}},659:t=>{var n={};t.exports=function(t,e){var i=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}},540:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},56:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var i="";e.supports&&(i+="@supports (".concat(e.supports,") {")),e.media&&(i+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(i+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),i+=e.css,a&&(i+="}"),e.media&&(i+="}"),e.supports&&(i+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(i,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},113:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(i){var a=n[i];if(void 0!==a)return a.exports;var o=n[i]={id:i,exports:{}};return t[i](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(72),n=e.n(t),i=e(825),a=e.n(i),o=e(659),r=e.n(o),s=e(56),d=e.n(s),c=e(540),l=e.n(c),A=e(113),u=e.n(A),p=e(365),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=r().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),n()(p.A,m),p.A&&p.A.locals&&p.A.locals;const g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function h(t){return(n={})=>{const e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const f={date:h({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:h({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:h({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},C={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function x(t){return(n,e)=>{let i;if("formatting"===(e?.context?String(e.context):"standalone")&&t.formattingValues){const n=t.defaultFormattingWidth||t.defaultWidth,a=e?.width?String(e.width):n;i=t.formattingValues[a]||t.formattingValues[n]}else{const n=t.defaultWidth,a=e?.width?String(e.width):t.defaultWidth;i=t.values[a]||t.values[n]}return i[t.argumentCallback?t.argumentCallback(n):n]}}const B={ordinalNumber:(t,n)=>{const e=Number(t),i=e%100;if(i>20||i<10)switch(i%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:x({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:x({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:x({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:x({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:x({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(t){return(n,e={})=>{const i=e.width,a=i&&t.matchPatterns[i]||t.matchPatterns[t.defaultMatchWidth],o=n.match(a);if(!o)return null;const r=o[0],s=i&&t.parsePatterns[i]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?function(t,n){for(let n=0;n<t.length;n++)if(t[n].test(r))return n}(s):function(t,n){for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&t[n].test(r))return n}(s);let c;return c=t.valueCallback?t.valueCallback(d):d,c=e.valueCallback?e.valueCallback(c):c,{value:c,rest:n.slice(r.length)}}}const b={ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,n={})=>{const e=t.match(v.matchPattern);if(!e)return null;const i=e[0],a=t.match(v.parsePattern);if(!a)return null;let o=v.valueCallback?v.valueCallback(a[0]):a[0];return o=n.valueCallback?n.valueCallback(o):o,{value:o,rest:t.slice(i.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var v;const I={code:"en-US",formatDistance:(t,n,e)=>{let i;const a=g[t];return i="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+i:i+" ago":i},formatLong:f,formatRelative:(t,n,e,i)=>C[t],localize:B,match:b,options:{weekStartsOn:0,firstWeekContainsDate:1}};let w={};function y(){return w}Math.pow(10,8);const L=6048e5,E=864e5,j=36e5;function S(t){const n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new t.constructor(+t):"number"==typeof t||"[object Number]"===n||"string"==typeof t||"[object String]"===n?new Date(t):new Date(NaN)}function M(t){const n=S(t);return n.setHours(0,0,0,0),n}function T(t){const n=S(t),e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),+t-+e}function q(t,n){const e=M(t),i=M(n),a=+e-T(e),o=+i-T(i);return Math.round((a-o)/E)}function D(t,n){return t instanceof Date?new t.constructor(n):new Date(n)}function P(t){const n=S(t);return q(n,function(t){const n=S(t),e=D(t,0);return e.setFullYear(n.getFullYear(),0,1),e.setHours(0,0,0,0),e}(n))+1}function N(t,n){const e=y(),i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,a=S(t),o=a.getDay(),r=(o<i?7:0)+o-i;return a.setDate(a.getDate()-r),a.setHours(0,0,0,0),a}function O(t){return N(t,{weekStartsOn:1})}function Y(t){const n=S(t),e=n.getFullYear(),i=D(t,0);i.setFullYear(e+1,0,4),i.setHours(0,0,0,0);const a=O(i),o=D(t,0);o.setFullYear(e,0,4),o.setHours(0,0,0,0);const r=O(o);return n.getTime()>=a.getTime()?e+1:n.getTime()>=r.getTime()?e:e-1}function W(t){const n=S(t),e=+O(n)-+function(t){const n=Y(t),e=D(t,0);return e.setFullYear(n,0,4),e.setHours(0,0,0,0),O(e)}(n);return Math.round(e/L)+1}function z(t,n){const e=S(t),i=e.getFullYear(),a=y(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,r=D(t,0);r.setFullYear(i+1,0,o),r.setHours(0,0,0,0);const s=N(r,n),d=D(t,0);d.setFullYear(i,0,o),d.setHours(0,0,0,0);const c=N(d,n);return e.getTime()>=s.getTime()?i+1:e.getTime()>=c.getTime()?i:i-1}function F(t,n){const e=S(t),i=+N(e,n)-+function(t,n){const e=y(),i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,a=z(t,n),o=D(t,0);return o.setFullYear(a,0,i),o.setHours(0,0,0,0),N(o,n)}(e,n);return Math.round(i/L)+1}function H(t,n){return(t<0?"-":"")+Math.abs(t).toString().padStart(n,"0")}const U={y(t,n){const e=t.getFullYear(),i=e>0?e:1-e;return H("yy"===n?i%100:i,n.length)},M(t,n){const e=t.getMonth();return"M"===n?String(e+1):H(e+1,2)},d:(t,n)=>H(t.getDate(),n.length),a(t,n){const e=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(t,n)=>H(t.getHours()%12||12,n.length),H:(t,n)=>H(t.getHours(),n.length),m:(t,n)=>H(t.getMinutes(),n.length),s:(t,n)=>H(t.getSeconds(),n.length),S(t,n){const e=n.length,i=t.getMilliseconds();return H(Math.trunc(i*Math.pow(10,e-3)),n.length)}},R={G:function(t,n,e){const i=t.getFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(i,{width:"abbreviated"});case"GGGGG":return e.era(i,{width:"narrow"});default:return e.era(i,{width:"wide"})}},y:function(t,n,e){if("yo"===n){const n=t.getFullYear(),i=n>0?n:1-n;return e.ordinalNumber(i,{unit:"year"})}return U.y(t,n)},Y:function(t,n,e,i){const a=z(t,i),o=a>0?a:1-a;return"YY"===n?H(o%100,2):"Yo"===n?e.ordinalNumber(o,{unit:"year"}):H(o,n.length)},R:function(t,n){return H(Y(t),n.length)},u:function(t,n){return H(t.getFullYear(),n.length)},Q:function(t,n,e){const i=Math.ceil((t.getMonth()+1)/3);switch(n){case"Q":return String(i);case"QQ":return H(i,2);case"Qo":return e.ordinalNumber(i,{unit:"quarter"});case"QQQ":return e.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(i,{width:"narrow",context:"formatting"});default:return e.quarter(i,{width:"wide",context:"formatting"})}},q:function(t,n,e){const i=Math.ceil((t.getMonth()+1)/3);switch(n){case"q":return String(i);case"qq":return H(i,2);case"qo":return e.ordinalNumber(i,{unit:"quarter"});case"qqq":return e.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(i,{width:"narrow",context:"standalone"});default:return e.quarter(i,{width:"wide",context:"standalone"})}},M:function(t,n,e){const i=t.getMonth();switch(n){case"M":case"MM":return U.M(t,n);case"Mo":return e.ordinalNumber(i+1,{unit:"month"});case"MMM":return e.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(i,{width:"narrow",context:"formatting"});default:return e.month(i,{width:"wide",context:"formatting"})}},L:function(t,n,e){const i=t.getMonth();switch(n){case"L":return String(i+1);case"LL":return H(i+1,2);case"Lo":return e.ordinalNumber(i+1,{unit:"month"});case"LLL":return e.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(i,{width:"narrow",context:"standalone"});default:return e.month(i,{width:"wide",context:"standalone"})}},w:function(t,n,e,i){const a=F(t,i);return"wo"===n?e.ordinalNumber(a,{unit:"week"}):H(a,n.length)},I:function(t,n,e){const i=W(t);return"Io"===n?e.ordinalNumber(i,{unit:"week"}):H(i,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getDate(),{unit:"date"}):U.d(t,n)},D:function(t,n,e){const i=P(t);return"Do"===n?e.ordinalNumber(i,{unit:"dayOfYear"}):H(i,n.length)},E:function(t,n,e){const i=t.getDay();switch(n){case"E":case"EE":case"EEE":return e.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},e:function(t,n,e,i){const a=t.getDay(),o=(a-i.weekStartsOn+8)%7||7;switch(n){case"e":return String(o);case"ee":return H(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(t,n,e,i){const a=t.getDay(),o=(a-i.weekStartsOn+8)%7||7;switch(n){case"c":return String(o);case"cc":return H(o,n.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(t,n,e){const i=t.getDay(),a=0===i?7:i;switch(n){case"i":return String(a);case"ii":return H(a,n.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},a:function(t,n,e){const i=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(i,{width:"narrow",context:"formatting"});default:return e.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(t,n,e){const i=t.getHours();let a;switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,n,e){const i=t.getHours();let a;switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){let n=t.getHours()%12;return 0===n&&(n=12),e.ordinalNumber(n,{unit:"hour"})}return U.h(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getHours(),{unit:"hour"}):U.H(t,n)},K:function(t,n,e){const i=t.getHours()%12;return"Ko"===n?e.ordinalNumber(i,{unit:"hour"}):H(i,n.length)},k:function(t,n,e){let i=t.getHours();return 0===i&&(i=24),"ko"===n?e.ordinalNumber(i,{unit:"hour"}):H(i,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getMinutes(),{unit:"minute"}):U.m(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getSeconds(),{unit:"second"}):U.s(t,n)},S:function(t,n){return U.S(t,n)},X:function(t,n,e){const i=t.getTimezoneOffset();if(0===i)return"Z";switch(n){case"X":return G(i);case"XXXX":case"XX":return J(i);default:return J(i,":")}},x:function(t,n,e){const i=t.getTimezoneOffset();switch(n){case"x":return G(i);case"xxxx":case"xx":return J(i);default:return J(i,":")}},O:function(t,n,e){const i=t.getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+X(i,":");default:return"GMT"+J(i,":")}},z:function(t,n,e){const i=t.getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+X(i,":");default:return"GMT"+J(i,":")}},t:function(t,n,e){return H(Math.trunc(t.getTime()/1e3),n.length)},T:function(t,n,e){return H(t.getTime(),n.length)}};function X(t,n=""){const e=t>0?"-":"+",i=Math.abs(t),a=Math.trunc(i/60),o=i%60;return 0===o?e+String(a):e+String(a)+n+H(o,2)}function G(t,n){return t%60==0?(t>0?"-":"+")+H(Math.abs(t)/60,2):J(t,n)}function J(t,n=""){const e=t>0?"-":"+",i=Math.abs(t);return e+H(Math.trunc(i/60),2)+n+H(i%60,2)}const Q=(t,n)=>{switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},Z=(t,n)=>{switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},$={p:Z,P:(t,n)=>{const e=t.match(/(P+)(p+)?/)||[],i=e[1],a=e[2];if(!a)return Q(t,n);let o;switch(i){case"P":o=n.dateTime({width:"short"});break;case"PP":o=n.dateTime({width:"medium"});break;case"PPP":o=n.dateTime({width:"long"});break;default:o=n.dateTime({width:"full"})}return o.replace("{{date}}",Q(i,n)).replace("{{time}}",Z(a,n))}},V=/^D+$/,K=/^Y+$/,_=["D","DD","YY","YYYY"];function tt(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const e=S(t);return!isNaN(Number(e))}const nt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,it=/^'([^]*?)'?$/,at=/''/g,ot=/[a-zA-Z]/;function rt(t){const n=t.match(it);return n?n[1].replace(at,"'"):t}function st(t,n){const e=n?.additionalDigits??2,i=function(t){const n={},e=t.split(dt.dateTimeDelimiter);let i;if(e.length>2)return n;if(/:/.test(e[0])?i=e[0]:(n.date=e[0],i=e[1],dt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(dt.timeZoneDelimiter)[0],i=t.substr(n.date.length,t.length))),i){const t=dt.timezone.exec(i);t?(n.time=i.replace(t[1],""),n.timezone=t[1]):n.time=i}return n}(t);let a;if(i.date){const t=function(t,n){const e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),i=t.match(e);if(!i)return{year:NaN,restDateString:""};const a=i[1]?parseInt(i[1]):null,o=i[2]?parseInt(i[2]):null;return{year:null===o?a:100*o,restDateString:t.slice((i[1]||i[2]).length)}}(i.date,e);a=function(t,n){if(null===n)return new Date(NaN);const e=t.match(ct);if(!e)return new Date(NaN);const i=!!e[4],a=ut(e[1]),o=ut(e[2])-1,r=ut(e[3]),s=ut(e[4]),d=ut(e[5])-1;if(i)return function(t,n,e){return n>=1&&n<=53&&e>=0&&e<=6}(0,s,d)?function(t,n,e){const i=new Date(0);i.setUTCFullYear(t,0,4);const a=7*(n-1)+e+1-(i.getUTCDay()||7);return i.setUTCDate(i.getUTCDate()+a),i}(n,s,d):new Date(NaN);{const t=new Date(0);return function(t,n,e){return n>=0&&n<=11&&e>=1&&e<=(mt[n]||(gt(t)?29:28))}(n,o,r)&&function(t,n){return n>=1&&n<=(gt(t)?366:365)}(n,a)?(t.setUTCFullYear(n,o,Math.max(a,r)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);const o=a.getTime();let r,s=0;if(i.time&&(s=function(t){const n=t.match(lt);if(!n)return NaN;const e=pt(n[1]),i=pt(n[2]),a=pt(n[3]);return function(t,n,e){return 24===t?0===n&&0===e:e>=0&&e<60&&n>=0&&n<60&&t>=0&&t<25}(e,i,a)?e*j+6e4*i+1e3*a:NaN}(i.time),isNaN(s)))return new Date(NaN);if(!i.timezone){const t=new Date(o+s),n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}return r=function(t){if("Z"===t)return 0;const n=t.match(At);if(!n)return 0;const e="+"===n[1]?-1:1,i=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(t,n){return n>=0&&n<=59}(0,a)?e*(i*j+6e4*a):NaN}(i.timezone),isNaN(r)?new Date(NaN):new Date(o+s+r)}const dt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ct=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,lt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,At=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ut(t){return t?parseInt(t):1}function pt(t){return t&&parseFloat(t.replace(",","."))||0}const mt=[31,null,31,30,31,30,31,31,30,31,30,31];function gt(t){return t%400==0||t%4==0&&t%100!=0}function ht(t,n){const e=S(t),i=S(n),a=ft(e,i),o=Math.abs(q(e,i));e.setDate(e.getDate()-a*o);const r=a*(o-Number(ft(e,i)===-a));return 0===r?0:r}function ft(t,n){const e=t.getFullYear()-n.getFullYear()||t.getMonth()-n.getMonth()||t.getDate()-n.getDate()||t.getHours()-n.getHours()||t.getMinutes()-n.getMinutes()||t.getSeconds()-n.getSeconds()||t.getMilliseconds()-n.getMilliseconds();return e<0?-1:e>0?1:e}console.log("Projects module loaded");const Ct=(()=>{let t=[];if(null===localStorage.getItem("projects"))t=[{icon:"fa-tools",title:"Craft New Project",tasks:[{title:"Enjoy my tea as much as my coding! 🍵",description:"Longer description of my demo task, just to show you this surprisingly nice scrollbar and amazingly cute kitty ฅ(^◉ᴥ◉^)ฅ",date:"2024-11-11",priority:"low",projectIndex:0,taskIndex:0,completed:!1}]},{icon:"fa-tools",title:"Craft Another Project",tasks:[{title:"Create magic through my mind, my heart and my keyboard.. 👩🏻‍💻",description:"Another longer description of my demo task, just to show you this surprisingly nice scrollbar and cute little birdie ϵ( ‘Θ’ )϶♪♫",date:"2024-12-12",priority:"high",projectIndex:1,taskIndex:0,completed:!1}]}];else{const n=JSON.parse(localStorage.getItem("projects"));t=n}class n{constructor(t,n){this.icon=t,this.title=n,this.tasks=[]}}return{projectList:t,addProject:function(e,i){const a=new n(e,i);t.push(a),console.log(a,t),kt.showProjects(),kt.manipulateModal("close")},editProject:function(n,e,i,a){t[i].icon=n,t[i].title=e,kt.showProjects(),kt.selectLink(a,i,"edit")},deleteProject:function(n){n>-1&&n<t.length?(t.splice(n,1),console.log("Project deleted. Remaining projects:",Ct.projectList)):console.error("Invalid project index for deletion:",projectIndex),kt.showProjects()}}})(),xt=Ct,Bt=(()=>{class t{constructor(t,n,e,i,a,o){this.title=t,this.description=n,this.date=e,this.priority=i,this.projectIndex=a,this.taskIndex=o,this.completed=!1}}return{addTask:function(n,e,i,a,o,r){const s=new t(n,e,i,a,o,r);xt.projectList[o].tasks.push(s),kt.getTasks("project",o),console.log("Add a task!")},deleteTask:function(t,n){if(t>-1&&t<xt.projectList.length){let e=xt.projectList[t].tasks;n>=0&&n<e.length?(e.splice(n,1),kt.getTasks("project",t)):console.error("Invalid task index:",n)}else console.log("invalid project index:",t)},editTask:function(t,n,e,i,a,o){xt.projectList[a].tasks[o].title=t,xt.projectList[a].tasks[o].description=n,xt.projectList[a].tasks[o].date=e,xt.projectList[a].tasks[o].priority=i,kt.getTasks("project",a)},toggleTaskCompletion:function(t,n,e){let i;!1===xt.projectList[t].tasks[n].completed?xt.projectList[t].tasks[n].completed=!0:xt.projectList[t].tasks[n].completed=!1,i=e.classList.contains("project")?"project":e.getAttribute("data-title"),kt.getTasks(i,t)}}})();console.log("DOM module loaded");const kt=(()=>{const t=document.querySelector(".toggle-menu"),n=document.querySelector("#sidebar-menu"),e=document.querySelector("#modal"),i=e.querySelector("#form"),a=e.querySelector("#modal-title"),o=e.querySelector(".modal-title-error"),r=document.querySelector("#main"),s=document.querySelector(".main-title-icon"),d=document.querySelector(".main-title-text"),c=document.querySelector(".projects-links-div"),l=document.querySelector(".add-task"),A=document.querySelector(".tasks-count"),u=document.querySelector(".tasks-list"),p=e.querySelector(".task-description"),m=e.querySelector("#dueDate"),g=e.querySelector(".task-priority");function h(t){const n=document.querySelectorAll(".menu-link-icon")[t].getAttribute("data-icon"),e=document.querySelectorAll(".menu-link-text");s.classList.add("fa-solid",n,"main-title-icon","fa-fw","padding-right"),d.textContent=e[t].textContent,document.title=`ToDo - ${d.textContent}`}function f(t,n){if(s.className="",t.classList.contains("menu-link")||t.classList.contains("menu-link-icon")||t.classList.contains("menu-link-text"))h(n);else if(t.classList.contains("project-link")||t.classList.contains("project-icon")||t.classList.contains("project-text")||t.classList.contains("project-icon-and-text-div")||t.classList.contains("project-default-icons-div")||t.classList.contains("delete-project")||t.classList.contains("edit-project")){const t=xt.projectList[n].icon;s.classList.add("fa-solid",t,"main-title-icon","fa-fw","padding-right"),d.textContent=xt.projectList[n].title,document.title=`Todo - ${d.textContent}`}}function C(t,n){let e,i;localStorage.setItem("projects",JSON.stringify(xt.projectList)),"project"===t?(e=n,i=n+1,0===xt.projectList[n].tasks.length&&(A.textContent=0)):(e=0,i=xt.projectList.length),function(t,n,e){const i=function(t,n,e){const i=y(),a=e?.locale??i.locale??I,o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??i.weekStartsOn??i.locale?.options?.weekStartsOn??0,s=S(t);if(!tt(s))throw new RangeError("Invalid time value");let d=n.match(et).map((t=>{const n=t[0];return"p"===n||"P"===n?(0,$[n])(t,a.formatLong):t})).join("").match(nt).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const n=t[0];if("'"===n)return{isToken:!1,value:rt(t)};if(R[n])return{isToken:!0,value:t};if(n.match(ot))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return{isToken:!1,value:t}}));a.localize.preprocessor&&(d=a.localize.preprocessor(s,d));const c={firstWeekContainsDate:o,weekStartsOn:r,locale:a};return d.map((i=>{if(!i.isToken)return i.value;const o=i.value;return(!e?.useAdditionalWeekYearTokens&&function(t){return K.test(t)}(o)||!e?.useAdditionalDayOfYearTokens&&function(t){return V.test(t)}(o))&&function(t,n,e){const i=function(t,n,e){const i="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${n}\`) for formatting ${i} to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,n,e);if(console.warn(i),_.includes(t))throw new RangeError(i)}(o,n,String(t)),(0,R[o[0]])(s,o,a.localize,c)})).join("")}(new Date,"yyyy-MM-dd");let a=0;A.textContent=0,u.textContent="";for(let o=n;o<e;o++)for(let n=0;n<xt.projectList[o].tasks.length;n++){const e=document.createElement("div"),r=document.createElement("div"),s=document.createElement("i"),d=document.createElement("p"),c=document.createElement("div"),l=document.createElement("p"),p=document.createElement("i"),m=document.createElement("i"),g=document.createElement("i");if("important"!==t||"high"===xt.projectList[o].tasks[n].priority){if("today"===t){if(console.log("tasks for today..."),xt.projectList[o].tasks[n].date!==i)continue}else if("week"===t){console.log("tasks for this week...");const t=st(i),e=st(xt.projectList[o].tasks[n].date);if(!(ht(e,t)<=7&&ht(e,t)>=0))continue}else if("completed"===t&&!0!==xt.projectList[o].tasks[n].completed)continue;a+=1,A.textContent=a,e.classList.add("task-div","hover-element"),e.setAttribute("data-index",o),e.classList.add("task-div","hover-element"),r.classList.add("flex"),e.setAttribute("data-project-index",o),e.setAttribute("data-task-index",n),"low"===xt.projectList[o].tasks[n].priority?s.classList.add("low-priority"):"medium"===xt.projectList[o].tasks[n].priority?s.classList.add("mid-priority"):"high"===xt.projectList[o].tasks[n].priority?s.classList.add("high-priority"):s.classList.add("fa-solid","padding-right"),s.setAttribute("data-project-index",o),s.setAttribute("data-task-index",n),d.classList.add("task-text"),d.textContent=xt.projectList[o].tasks[n].title,d.setAttribute("data-project-index",o),d.setAttribute("data-task-index",n),c.classList.add("flex"),l.classList.add("due-date","padding-right"),void 0!==xt.projectList[o].tasks[n].date?l.textContent=xt.projectList[o].tasks[n].date:l.textContent="",p.classList.add("fa-solid","fa-edit","edit-task","task-icon","scale-element","padding-right"),p.setAttribute("data-project-index",o),p.setAttribute("data-task-index",n),m.classList.add("fa-solid","fa-trash-alt","task-icon","scale-element","delete-task","padding-right"),m.setAttribute("data-project-index",o),m.setAttribute("data-task-index",n),g.classList.add("fa-solid","scale-element","task-icon","fa-info-circle"),g.setAttribute("data-project-index",o),g.setAttribute("data-task-index",n),r.appendChild(s),r.appendChild(d),c.appendChild(l),c.appendChild(p),c.appendChild(m),c.appendChild(g),e.appendChild(r),e.appendChild(c),u.appendChild(e),!1===xt.projectList[o].tasks[n].completed?(d.classList.remove("task-done-text"),s.classList.add("fa-solid","fa-circle","padding-right")):(d.classList.add("task-done-text"),s.classList.add("fa-solid","fa-check-circle","padding-right")),B("close")}}}(t,e,i)}function x(t,n,e){if(!t||"function"!=typeof t.getAttribute)return void console.error("Invalid target element passed to selectLink:",t);const i=document.querySelectorAll(".link"),a=document.querySelectorAll(".project-link"),o=t.getAttribute("data-title");i.forEach((t=>{t.classList.remove("selected-link")})),t.classList.contains("link")?(t.classList.add("selected-link"),"edit"===e&&a[n].classList.add("selected-link")):(t.classList.contains("menu-link-icon")||t.classList.contains("menu-link-text"))&&t.parentElement.classList.add("selected-link"),t.classList.contains("project")&&(l.classList.remove("hide"),C("project",n),t.classList.contains("project-icon")||t.classList.contains("project-text")||t.classList.contains("edit-project")||t.classList.contains("delete-project")?t.parentElement.parentElement.classList.add("selected-link"):(t.classList.contains("project-icon-and-text-div")||t.classList.contains("project-default-icons-div"))&&t.parentElement.classList.add("selected-link")),(t.classList.contains("menu-link")||t.classList.contains("menu-link-icon")||t.classList.contains("menu-link-text"))&&C(o)}function B(t,n,i,r,s){const d=e.querySelector(".modal-header"),c=e.querySelector(".modal-main-title"),l=e.querySelector(".modal-task-button"),A=e.querySelector(".project-deletion-text"),u=e.querySelector(".task-deletion-text"),h=e.querySelector(".info-div"),f=e.querySelector(".confirm-modal"),C=e.querySelector(".cancel-modal");d.classList.remove("deletion-modal-header");const x=document.querySelector("#form");if(x.reset(),x.classList.remove("hide"),h.classList.add("hide"),o.classList.add("hide"),A.classList.add("hide"),u.classList.add("hide"),C.classList.remove("cancel-deletion"),f.classList.remove("confirm-deletion","hide"),"show"===t){const t=e.querySelector(".radio-form"),o=e.querySelector(".modal-tasks-div");if(e.classList.remove("hide"),c.textContent=n,l.textContent=i,t.classList.remove("hide"),t.classList.add("show"),o.classList.add("hide"),"Edit Project"===n){const t=e.querySelectorAll(".icon"),n=xt.projectList[r].icon;a.value=xt.projectList[r].title;for(let e=0;e<t.length;e++)t[e].value===n&&(t[e].checked=!0)}else"Add Task"===n||"Edit Task"===n?(t.classList.remove("show"),t.classList.add("hide"),o.classList.remove("hide"),"Edit Task"===n&&(a.value=xt.projectList[r].tasks[s].title,p.value=xt.projectList[r].tasks[s].description,m.value=xt.projectList[r].tasks[s].date,g.value=xt.projectList[r].tasks[s].priority)):"Task Info"===n?(x.classList.add("hide"),f.classList.add("hide"),h.classList.remove("hide"),function(t,n){const e=document.querySelector(".info-task-title"),i=document.querySelector(".info-task-description"),a=document.querySelector(".info-task-due-date"),o=document.querySelector(".info-task-priority"),r=document.querySelector(".info-task-project");e.textContent=xt.projectList[t].tasks[n].title,i.textContent=xt.projectList[t].tasks[n].description,a.textContent=xt.projectList[t].tasks[n].date,"low"===xt.projectList[t].tasks[n].priority?o.textContent="I can do it later or never at all... 😴":"medium"===xt.projectList[t].tasks[n].priority?o.textContent="Somewhere between Relax & Focus 😅":"high"===xt.projectList[t].tasks[n].priority?o.textContent="Now or never! 😲":o.textContent="",r.textContent=xt.projectList[t].title}(r,s)):"delete"===n&&(d.classList.add("deletion-modal-header"),x.classList.add("hide"),C.classList.add("cancel-deletion"),f.classList.add("confirm-deletion"))}if("close"===t&&(console.log("closing modal"),e.classList.add("hide")),"Delete"===i)if(d.classList.add("deletion-modal-header"),x.classList.add("hide"),C.classList.add("cancel-deletion"),f.classList.add("confirm-deletion"),"Delete Project"===n){const t=document.querySelector(".project-deletion-title");A.classList.remove("hide"),t.textContent=xt.projectList[r].title}else if("Delete Task"===n){const t=document.querySelector(".task-deletion-title");u.classList.remove("hide"),t.textContent=xt.projectList[r].tasks[s].title}}return{responsiveMenu:function(){window.innerWidth<=1e3?(t.classList.remove("active"),n.classList.remove("show-sidebar"),n.classList.add("hide-sidebar"),n.classList.add("add-z-index"),r.classList.remove("contract-main"),r.classList.add("expand-main")):(n.classList.remove("hide-sidebar"),n.classList.add("show-sidebar"),n.classList.remove("add-z-index"),r.classList.remove("expand-main"),r.classList.add("contract-main"),r.classList.remove("inactive-main"))},toggleMenu:function(){t.classList.toggle("active"),n.classList.contains("hide-sidebar")?(n.classList.remove("hide-sidebar"),n.classList.add("show-sidebar"),r.classList.add("inactive-main")):n.classList.contains("show-sidebar")&&(n.classList.remove("show-sidebar"),n.classList.add("hide-sidebar"),r.classList.remove("inactive-main"))},showMainTitle:h,changeMainTitle:f,getTasks:C,selectLink:x,manipulateModal:B,validateModal:function(t,n,s,d){const A=document.forms.form.projectFormIcon.value,u=e.querySelector(".radio-form"),h=a.value,C=document.querySelector(".project-deletion-text"),B=document.querySelector(".link:first-child");if(i.classList.contains("hide")||""!==h)if("add"===t&&u.classList.contains("show")){xt.addProject(A,h),r.classList.remove("inactive-main");const t=c.lastChild,n=c.lastChild.getAttribute("data-link-index");x(t,n),f(t,n)}else if("edit"===t&&u.classList.contains("show")){const t=document.querySelectorAll(".project-link");t[n].classList.add("selected-link");const e=t[n];xt.editProject(A,h,n,d),f(e,n)}else if("delete"!==t||C.classList.contains("hide"))if("delete"===t)Bt.deleteTask(n,s);else if("add"===t&&u.classList.contains("hide")){let t;document.querySelector(".selected-link").getAttribute("data-link-index"),t="low"===g.value?"low":"medium"===g.value?"medium":"high"===g.value?"high":"",Bt.addTask(h,p.value,m.value,t,n)}else if("edit"===t||"delete"===t){let t;d.classList.contains("menu-link")?t=d.getAttribute("data-title"):d.classList.contains("project-link")&&(t="project")}else"delete"!==t||C.classList.contains("hide")||(xt.deleteProject(n),B.classList.add("selected-link"),l.classList.add("hide"));else{const t=document.querySelector(".link:first-child");console.log("Attempting to delete project at index:",n),xt.deleteProject(n),t.classList.add("selected-link")}else o.classList.remove("hide"),o.classList.add("show");if("edit"===t){const t=a.value,e=p.value,i=m.value,o=g.value;Bt.editTask(t,e,i,o,n,s)}},showProjects:function(){console.log("Preparing to display projects");const t=document.querySelector(".projects-count");localStorage.setItem("projects",JSON.stringify(xt.projectList)),t.textContent=xt.projectList.length,c.textContent="";for(let t=0;t<xt.projectList.length;t++){const n=document.createElement("a"),e=document.createElement("i"),i=document.createElement("p"),a=document.createElement("div"),o=document.createElement("div"),r=document.createElement("i"),s=document.createElement("i");a.classList.add("project-icon-and-text-div","project","select"),a.setAttribute("data-link-index",t),o.classList.add("project-default-icons-div","project","select"),o.setAttribute("data-link-index",t),n.setAttribute("href","#"),n.setAttribute("data-link-index",t),n.classList.add("project-link","project","select","link"),e.classList.add("fa-solid","project-icon",xt.projectList[t].icon,"fa-fw","project","select","padding-right"),e.setAttribute("data-link-index",t),i.classList.add("project-text","project","select"),i.textContent=xt.projectList[t].title,i.setAttribute("data-link-index",t),r.classList.add("fa-regular","fa-pen-to-square","edit-project","project","project-icon","scale-element","padding-right","select","edit-project"),r.setAttribute("data-link-index",t),s.classList.add("fa-regular","fa-trash-can","project","project-icon","scale-element","delete-project","select"),s.setAttribute("data-link-index",t),o.appendChild(r),o.appendChild(s),a.appendChild(e),a.appendChild(i),n.appendChild(a),n.appendChild(o),c.appendChild(n)}B("close"),console.log("Projects displayed")}}})();console.log("Handlers module loaded");const bt=function(){window.addEventListener("resize",kt.responsiveMenu)},vt=function(){let t,n;document.addEventListener("click",(e=>{console.log("Clicked element:",e.target),console.log("Closest .link element:",e.target.closest(".link"));const{target:i}=e,a=document.querySelector(".modal-main-title"),o=document.querySelector(".selected-link"),r=parseInt(i.getAttribute("data-link-index"),10);if(e.target.matches(".select")){let t=e.target.getAttribute("data-link-index");console.log("Clicked on .select, index set to:",t,"Event target:",e.target),t?kt.showMainTitle(t):console.error("Index is null","Event target:",e.target)}if((i.classList.contains("toggle-menu")||i.classList.contains("burger-line"))&&kt.toggleMenu(),i.classList.contains("select")&&(kt.selectLink(i,r),kt.changeMainTitle(i,r)),i.classList.contains("add-project")?kt.manipulateModal("show","Add Project","Add"):i.classList.contains("project-icon")&&(t=parseInt(i.getAttribute("data-link-index"),10)),i.classList.contains("edit-project")?kt.manipulateModal("show","Edit Project","Edit",t):i.classList.contains("delete-project")&&(kt.selectLink(),kt.manipulateModal("show","Delete Project","Delete",t)),i.classList.contains("task-icon")&&(t=parseInt(i.getAttribute("data-project-index"),10),n=parseInt(i.getAttribute("data-task-index"),10),i.classList.contains("add-task")?kt.manipulateModal("show","Add Task","Add"):i.classList.contains("edit-task")?kt.manipulateModal("show","Edit Task","Edit",t,n):i.classList.contains("delete-task")?kt.manipulateModal("show","Delete Task","Delete",t,n):i.classList.contains("fa-info-circle")&&kt.manipulateModal("show","Task Info","",t,n)),i.classList.contains("confirm-modal"))if("Add"===i.textContent)t=parseInt(o.getAttribute("data-link-index"),10),kt.validateModal("add",t,"",o);else if("Edit"===i.textContent)"Edit Project"===a.textContent?kt.validateModal("edit",t,"",o):"Edit Task"===a.textContent&&kt.validateModal("edit",t,n,o);else if("Delete"===i.textContent){const e=document.querySelector(".project-deletion-text");e.classList.contains("hide")?e.classList.contains("hide")&&kt.validateModal("delete",t,n,o):(t=parseInt(o.getAttribute("data-link-index"),10),kt.validateModal("delete",t,"",o),kt.changeMainTitle(i,0),kt.showMainTitle(0),kt.getTasks("all"))}i.classList.contains("close")&&kt.manipulateModal("close"),(i.classList.contains("task-div")||i.classList.contains("fa-circle")||i.classList.contains("fa-check-circle")||i.classList.contains("task-text"))&&(t=parseInt(i.getAttribute("data-project-index"),10),n=parseInt(i.getAttribute("data-task-index"),10),Bt.toggleTaskCompletion(t,n,o))}))};kt.showProjects(),document.addEventListener("DOMContentLoaded",(function(){console.log("DOM fully loaded"),kt.showMainTitle(0),kt.showProjects(),kt.getTasks("all"),kt.responsiveMenu(),vt(),bt()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,